//
//  OTTInteractor.swift
//  iOS_OTT
//
//  Created by 최민준(Minjun Choi) on 2023/04/07.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift


protocol OTTBusinessLogic {
    func requestPageInfo(request: OTT.Something.Request)
}

protocol OTTDataStore {
    var popularMovieResultList: [PopularMovieListModel.Result]? { get }
    var nowPlayingMovieResultList: [NowPlayingMovieListModel.Results]? { get }
    var topRatedMovieResultList: [TopRatedMovieListModel.Result]? { get }
    var upComingMovieResultList: [UpComingMovieListModel.Results]? { get } 
}

class OTTInteractor: OTTBusinessLogic, OTTDataStore {
    var presenter: OTTPresentationLogic?
    let worker: OTTWorker = .init()
    
    private let disposeBag: DisposeBag = .init()
    
    var popularListPageNum: Int = 1
    var nowPlayingListPageNum: Int = 1
    var topRatedListPageNum: Int = 1
    var upComingListPageNum: Int = 1
    
    var popularMovieResultList: [PopularMovieListModel.Result]?
    var nowPlayingMovieResultList: [NowPlayingMovieListModel.Results]?
    var topRatedMovieResultList: [TopRatedMovieListModel.Result]?
    var upComingMovieResultList: [UpComingMovieListModel.Results]?
    
    // MARK: Do something
    
    func requestPageInfo(request: OTT.Something.Request) {
        
        switch request.movieType {
        case .popular:
            switch request.pageType {
            case .first:
                self.popularListPageNum = 1
            case .next:
                self.popularListPageNum += 1
            }
            
            self.worker.requestPopularMovieList(pageNum: self.popularListPageNum)
                .subscribe(onSuccess: { (list) in
                    guard let results = list.results else { return }
                    self.popularMovieResultList?.append(contentsOf: results)
                    self.presenter?.presentPageInfo(response: .init(movieType: .popular, popularMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .nowPlaying:
            switch request.pageType {
            case .first:
                self.nowPlayingListPageNum = 1
            case .next:
                self.nowPlayingListPageNum += 1
            }
            self.worker.requestNowPlayingMovieList(pageNum: self.nowPlayingListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(movieType: .nowPlaying, nowPlayingMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .topRated:
            switch request.pageType {
            case .first:
                self.topRatedListPageNum = 1
            case .next:
                self.topRatedListPageNum += 1
            }
            self.worker.requestTopRatedMovieList(pageNum: self.topRatedListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(movieType: .topRated, topRatedMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .upComing:
            switch request.pageType {
            case .first:
                self.upComingListPageNum = 1
            case .next:
                self.upComingListPageNum += 1
            }
            
            self.worker.requestUpComingMovieList(pageNum: self.upComingListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(movieType: .upComing, upComingMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
        }
    }
}
