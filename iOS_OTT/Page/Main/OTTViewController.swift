//
//  OTTViewController.swift
//  iOS_OTT
//
//  Created by 최민준(Minjun Choi) on 2023/04/07.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa


protocol OTTDisplayLogic: class {
    func displayPageInfo(viewModel: OTT.Something.ViewModel)
}

class OTTViewController: UIViewController, OTTDisplayLogic {
    var interactor: OTTBusinessLogic?
    var router: (NSObjectProtocol & OTTRoutingLogic & OTTDataPassing)?
    
    var pageView: OTTView { self.view as! OTTView }
    
    private let disposeBag: DisposeBag = .init()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OTTInteractor()
        let presenter = OTTPresenter()
        let router = OTTRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: - View lifecycle
    
    override func loadView() {
        self.view = OTTView.create()
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.requestPageInfo()
        self.eventBinding()
    }
    
    private func eventBinding() {
        self.pageView.popularMovieListNextEvent.bind {
            self.interactor?.requestPageInfo(request: .init(movieType: .popular, pageType: .next))
        }.disposed(by: self.disposeBag)
        self.pageView.nowPlayingMovieListNextEvent.bind {
            self.interactor?.requestPageInfo(request: .init(movieType: .nowPlaying, pageType: .next))
        }.disposed(by: self.disposeBag)
        self.pageView.topRatedMovieListNextEvent.bind {
            self.interactor?.requestPageInfo(request: .init(movieType: .topRated, pageType: .next))
        }.disposed(by: self.disposeBag)
        self.pageView.upComingMovieListNextEvent.bind {
            self.interactor?.requestPageInfo(request: .init(movieType: .upComing, pageType: .next))
        }.disposed(by: self.disposeBag)
    }
    
    // MARK: Do something
    
    func requestPageInfo() {
        self.interactor?.requestPageInfo(request: .init(movieType: .popular, pageType: .first))
        self.interactor?.requestPageInfo(request: .init(movieType: .nowPlaying, pageType: .first))
        self.interactor?.requestPageInfo(request: .init(movieType: .topRated, pageType: .first))
        self.interactor?.requestPageInfo(request: .init(movieType: .upComing, pageType: .first))
    }
    
    func displayPageInfo(viewModel: OTT.Something.ViewModel) {
        guard let movieType = viewModel.movieType else { return }
        
        switch movieType {
        case .popular:
            self.pageView.displayMovieList(viewModel: .init(movieType: .popular, cellModel: viewModel.cellModel))
            break
        case .nowPlaying:
            self.pageView.displayMovieList(viewModel: .init(movieType: .nowPlaying, cellModel: viewModel.cellModel))
            break
        case .topRated:
            self.pageView.displayMovieList(viewModel: .init(movieType: .topRated, cellModel: viewModel.cellModel))
            break
        case .upComing:
            self.pageView.displayMovieList(viewModel: .init(movieType: .upComing, cellModel: viewModel.cellModel))
            break
        }
       
    }
}
