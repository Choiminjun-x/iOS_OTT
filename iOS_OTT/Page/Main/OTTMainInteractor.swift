//
//  OTTMainInteractor.swift
//  iOS_OTT
//
//  Created by 최민준(Minjun Choi) on 2023/04/07.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift


protocol OTTMainBusinessLogic {
    func requestPageInfo(request: OTTMain.Something.Request)
}

protocol OTTMainDataStore {
    var popularMovieList: [MovieListModel.Result]? { get }
}

class OTTMainInteractor: OTTMainBusinessLogic, OTTMainDataStore {
    var presenter: OTTMainPresentationLogic?
    let worker: OTTMainWorker = .init()
    
    private let disposeBag: DisposeBag = .init()
    
    var popularListPageNum: Int = 1
    var nowPlayingListPageNum: Int = 1
    var topRatedListPageNum: Int = 1
    var upComingListPageNum: Int = 1
    
    var popularMovieList: [MovieListModel.Result]?
   
    
    // MARK: Do something
    
    func requestPageInfo(request: OTTMain.Something.Request) {
        switch request.listType {
        case .popular:
            switch request.pageType {
            case .first:
                self.popularListPageNum = 1
            case .next:
                self.popularListPageNum += 1
            }
            
            self.worker.requestMovieList(listType: .popular, pageNum: self.popularListPageNum)
                .subscribe(onSuccess: { (list) in
                    guard let results = list.results else { return }
                    self.popularMovieList?.append(contentsOf: results)
                    self.presenter?.presentPageInfo(response: .init(listType: .popular, popularMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .nowPlaying:
            switch request.pageType {
            case .first:
                self.nowPlayingListPageNum = 1
            case .next:
                self.nowPlayingListPageNum += 1
            }
            self.worker.requestMovieList(listType: .nowPlaying, pageNum: self.nowPlayingListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(listType: .nowPlaying, nowPlayingMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .topRated:
            switch request.pageType {
            case .first:
                self.topRatedListPageNum = 1
            case .next:
                self.topRatedListPageNum += 1
            }
            self.worker.requestMovieList(listType: .topRated, pageNum: self.topRatedListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(listType: .topRated, topRatedMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
            
        case .upComing:
            switch request.pageType {
            case .first:
                self.upComingListPageNum = 1
            case .next:
                self.upComingListPageNum += 1
            }
            
            self.worker.requestMovieList(listType: .upComing, pageNum: self.upComingListPageNum)
                .subscribe(onSuccess: { (list) in
                    self.presenter?.presentPageInfo(response: .init(listType: .upComing, upComingMovieListData: list))
                }, onFailure: { (error) in
                    self.presenter?.presentPageInfoError(response: .init(error: error))
                }).disposed(by: self.disposeBag)
            break
        }
    }
}
