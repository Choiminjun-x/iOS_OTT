//
//  MovieDetailInteractor.swift
//  iOS_OTT
//
//  Created by 최민준 on 12/11/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import Alamofire


protocol MovieDetailBusinessLogic {
    func requestPageInfo(request: MovieDetail.Something.Request)
}

protocol MovieDetailDataStore {
    var movieId: Int? { get set }
}

class MovieDetailInteractor: MovieDetailBusinessLogic, MovieDetailDataStore {
    var presenter: MovieDetailPresentationLogic?
    
    var movieId: Int?
    
    let apiKey = "8dfb5cff049f9d201dd76dbbe04a0d71"
    let language = "ko-RK" //en-US
    
    private let disposeBag: DisposeBag = .init()
    
    
    // MARK: Do something
    
    func requestPageInfo(request: MovieDetail.Something.Request) {
        guard let movieId = self.movieId else {
            self.presenter?.presentPageInfoError(response: .init())
            return
        }
        
        self.requestMovieDetail(movieId: movieId)
            .subscribe(onSuccess: { (data) in
                self.presenter?.presentPageInfo(response: .init(movieDetailData: data))
            }, onFailure: { (error) in
                self.presenter?.presentPageInfoError(response: .init(error: error))
            }).disposed(by: self.disposeBag)
    }
    
    private func requestMovieDetail(movieId: Int) -> Single<MovieDetailDataModel> {
        // 영화 상세 데이터 호출
        Single.create { (observer) -> Disposable in
            let url = "https://api.themoviedb.org/3/movie/\(movieId)?api_key=\(self.apiKey)&language=\(self.language)"
            AF.request(url, method: .get)
                .validate(contentType: ["application/json"])
                .responseJSON { response in
                    print(response.result) //들어옴
                    switch response.result {
                    case .success(_):
                        guard let result = response.data else { return }
                        do {
                            let dto = try JSONDecoder().decode(MovieDetailDataModel.self, from: result)
                            observer(.success(dto))
                        } catch (let error) {
                            observer(.failure(error))
                        }
                        
                    case .failure(let error):
                        observer(.failure(error))
                    }
                }
            return Disposables.create {}
        }
    }
}
